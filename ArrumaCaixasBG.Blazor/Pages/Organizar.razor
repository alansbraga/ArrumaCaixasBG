@page "/Organizar"
@using ArrumaCaixasBG.DadosCSV
@using System.Net.Http.Headers
@using System.Text
@using BlazorDownloadFile
@inject IOrganizacaoInterativa organizador
@inject IOrigemDados OrigemDados
@inject DialogService DialogService
@inject IBlazorDownloadFileService BlazorDownloadFileService

<RadzenRow Visible=@(!inicou)>
    <RadzenColumn Size="12">
        <OrganizacaoInicio InicioRequisitado="InicioRequisitado"></OrganizacaoInicio>
    </RadzenColumn>
</RadzenRow>
<RadzenRow Visible=@inicou>
    <RadzenSplitter Orientation="Orientation.Horizontal">
        <RadzenSplitterPane Min="17%" Size="17%">
            
            <RadzenListBox @bind-Value=@prateleirasSelecionadas Data=@prateleiras TextProperty="Nome"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                           Multiple=true AllowClear=true Placeholder="Prateleiras" Style="width: 100%"/>
            <RadzenListBox @bind-Value=@caixasSelecionadas Data=@caixas TextProperty="Nome"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                           Multiple=true AllowClear=true Placeholder="Caixas" Style="width: 100%"/>
            <RadzenListBox @bind-Value=@solucoesSelecionadas Data=@solucoes TextProperty="Nome"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                           Multiple=true AllowClear=true Placeholder="Algoritmos" Style="width: 100%"/>
    
        </RadzenSplitterPane>
        <RadzenSplitterPane>
                <RadzenRow>
                    <RadzenRadioButtonList @bind-Value=@visao TValue="int">
                        <Items>
                            <RadzenRadioButtonListItem Text="Organizar" Value="1"/>
                            <RadzenRadioButtonListItem Text="Organizadas" Value="2"/>
                        </Items>
                    </RadzenRadioButtonList>
                </RadzenRow>
                <RadzenRow Visible=@(visao == 1)>
                    <RadzenButton Click=@(OrganizarSelecionados)>Organizar Selecionados</RadzenButton>
                    <RadzenButton Click=@(SelecionarPrateleira) Disabled=@(visaoSelecionar?.Prateleira is null)>Usar Organização</RadzenButton>
                </RadzenRow>
                <RadzenRow Visible=@(visao == 2)>
                    <RadzenButton Click=@Salvar>Gravar</RadzenButton>
                </RadzenRow>
                <RadzenRow>
                    <VisaoPrateleira @ref="visaoSelecionar" Prateleiras=@(visao == 1 ? prateleirasParaSelecionar : organizador.PrateleirasOrganizadas())></VisaoPrateleira>
                </RadzenRow>
            </RadzenSplitterPane>

    </RadzenSplitter>

    
</RadzenRow>
@code {
    private readonly List<Caixa> caixas = new List<Caixa>();
    private List<Caixa> caixasSelecionadas = new List<Caixa>();
    private readonly List<Prateleira> prateleirasParaSelecionar = new();

    private readonly List<ISolucaoOrganizador> solucoes = new List<ISolucaoOrganizador>();
    private List<ISolucaoOrganizador> solucoesSelecionadas = new List<ISolucaoOrganizador>();

    private readonly List<Prateleira> prateleiras = new List<Prateleira>();
    private List<Prateleira> prateleirasSelecionadas = new List<Prateleira>();
    private readonly List<ResultadoOrganizacao> resultados = new();
    private VisaoPrateleira visaoSelecionar = null!;
    private readonly Dictionary<string, string> descricoes = new();
    private int visao = 1;
    private bool inicou = false;


    private void ArrumarTela()
    {
        caixas.Clear();
        caixas.AddRange(organizador.CaixasDisponiveis());
        caixasSelecionadas.Clear();
        caixasSelecionadas.AddRange(caixas);
        prateleiras.Clear();
        prateleiras.AddRange(organizador.PrateleirasVazias());
        prateleirasSelecionadas.Clear();
        prateleirasSelecionadas.AddRange(prateleiras);
        solucoes.Clear();
        solucoes.AddRange(organizador.SolucoesDisponiveis());
        solucoesSelecionadas.Clear();
        solucoesSelecionadas.AddRange(solucoes);
        descricoes.Clear();
        prateleirasParaSelecionar.Clear();
    }

    private async Task OrganizarSelecionados(MouseEventArgs arg)
    {
        ShowBusyDialog();
        try
        {
            var source = new CancellationTokenSource();
            var token = source.Token;
        
            resultados.Clear();
            var organizados = await organizador
                .OrganizarAsync(solucoesSelecionadas.ToArray(), 
                    prateleirasSelecionadas.ToArray(), 
                    caixasSelecionadas.ToArray(),   
                    token);
            resultados.AddRange(organizados);
        
            prateleirasParaSelecionar.Clear();
            var l = new List<Prateleira>();
            foreach (var r in resultados)
            {
                foreach (var p in r.Prateleiras)
                {
                    var perc = (1 - (p.VolumeNaoUtilizado / p.Volume));
                    var nova = $"{perc:P2} - {p.Nome} - {r.Descricao}";

                    descricoes[nova] = p.Nome;
                    p.Nome = nova;
                    l.Add(p);
                }
            }
            prateleirasParaSelecionar.AddRange(l.OrderByDescending(p => 1 - (p.VolumeNaoUtilizado / p.Volume)));

        }
        finally
        {
            DialogService.Close(); 
            StateHasChanged();
        }
    }

    private Task SelecionarPrateleira(MouseEventArgs arg)
    {
        if (visaoSelecionar.Prateleira is null)
            return Task.CompletedTask;
        visaoSelecionar.Prateleira.Nome = descricoes[visaoSelecionar.Prateleira.Nome];
        organizador.UsarPrateleira(visaoSelecionar.Prateleira);
        ArrumarTela();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task Salvar(MouseEventArgs arg)
    {
        var nome = $"Arrumacao{DateTime.Now:yyyy-MM-dd-hh:mm:ss}.json";
        var arrumacao = new Arrumacao()
        {
            Nome = nome,
            Prateleiras = organizador.PrateleirasOrganizadas()
        };
        var str = System.Text.Json.JsonSerializer.Serialize(arrumacao);

        BlazorDownloadFileService.DownloadFileFromText(nome, str, Encoding.Default, "text/json", false);
        return Task.CompletedTask;
    }
    
    async Task ShowBusyDialog()
    {
        await BusyDialog();
    }

    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<div>
                <div class="row">
                    <div class="col-md-12">
                        Processando...
                    </div>
                </div>
            </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
    }

    private Task InicioRequisitado(InicioOrganizacao arg)
    {
        try
        {
            ShowBusyDialog();
            OrigemDados.DefineCaixas(arg.Caixas);
            OrigemDados.DefinePrateleiras(arg.Prateleiras);
            organizador.Iniciar();
            inicou = true;
            ArrumarTela();
        }
        finally
        {
            DialogService.Close();
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
}
